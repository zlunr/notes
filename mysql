## 下载 MySQL 典型安装 

## 配置环境变量 
> 打开：计算机属性-高级系统设置-环境变量-新建》 变量名 MYSQL_HOME 变量值 C:\Program Files\MySQL\MySQL Server 5.5
> 找到变量名为 Path 点击编辑 在变量值后面添加 ;C:\Program Files\MySQL\MySQL Server 5.5/bin 注意在路径前接分号

## 安装管理数据库的软件 暂时没找到好用的

## 命令行基本语法
> mysql -u root -p      //进入名称为 root
> password:         //输入密码
*注意语句结束后加；分号
> create database 数据库名; // 创建数据库
> use 数据库名；  // 进入数据库
> drop database 数据库名； //删除数据库
> create table 数据表名称 （
> id int ,
> name char(8)
> );
> 创建数据表成功
> drop table 数据表名称; //删除数据表
> insert into 数据表名称 (id,name) values(1,'zhenglun'); //新增数据
> ....

## 使用node连接数据库
首先写一个测试表 我们可以在test数据库中创建一个pets表。test数据库是MySQL安装后自动创建的用于测试的数据库。在MySQL命令行执行下列命令：
grant all privileges on test.* to 'www'@'%' identified by 'www';

use test;

create table pets (
    id varchar(50) not null,
    name varchar(100) not null,
    gender bool not null,
    birth varchar(10) not null,
    createdAt bigint not null,
    updatedAt bigint not null,
    version bigint not null,
    primary key (id)
) engine=innodb;

新建一个工程：
> npm init //初始化项目

使用 requelize 插件来连接数据库 
> npm install --save requelize
> npm install --save mysql2
配置 config.js
var config = {
    database: 'test', // 使用哪个数据库
    username: 'www', // 用户名
    password: 'www', // 口令
    host: 'localhost', // 主机名
    port: 3306 // 端口号，MySQL默认3306
};

module.exports = config;

创建 app.js

const Sequelize = require('sequelize');
const config = require('./config');

var sequelize = new Sequelize(config.database, config.username, config.password, {
    host: config.host,
    dialect: 'mysql',
    pool: {
        max: 5,
        min: 0,
        idle: 30000
    }
});

第二步，定义模型Pet，告诉Sequelize如何映射数据库表：

var Pet = sequelize.define('pet', {
    id: {
        type: Sequelize.STRING(50),
        primaryKey: true
    },
    name: Sequelize.STRING(100),
    gender: Sequelize.BOOLEAN,
    birth: Sequelize.STRING(10),
    createdAt: Sequelize.BIGINT,
    updatedAt: Sequelize.BIGINT,
    version: Sequelize.BIGINT
}, {
        timestamps: false
    });

新增数据：
var now = Date.now();
Pet.create({
    id: 'g-' + now,
    name: 'Gaffey',
    gender: false,
    birth: '2007-07-07',
    createdAt: now,
    updatedAt: now,
    version: 0
}).then(function (p) {
    console.log('created.' + JSON.stringify(p));
}).catch(function (err) {
    console.log('failed: ' + err);
});

使用es7 中的 await写法：
(async () => {
    var dog = await Pet.create({
        id: 'd-' + now,
        name: 'Odie',
        gender: false,
        birth: '2008-08-08',
        createdAt: now,
        updatedAt: now,
        version: 0
    });
    console.log('created: ' + JSON.stringify(dog));
})();

查询数据时，用await写法如下：
(async () => {
    var pets = await Pet.findAll({
        where: {
            name: 'Gaffey'
        }
    });
    console.log(`find ${pets.length} pets:`);
    for (let p of pets) {
        console.log(JSON.stringify(p));
    }
})();

如果要更新数据，可以对查询到的实例调用save()方法：
(async () => {
    var p = await queryFromSomewhere();
    p.gender = true;
    p.updatedAt = Date.now();
    p.version ++;
    await p.save();
})();

如果要删除数据，可以对查询到的实例调用destroy()方法：
(async () => {
    var p = await queryFromSomewhere();
    await p.destroy();
})();
